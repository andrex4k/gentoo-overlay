description: fix gcc optimization follows but attribute doesn't match warnings
author: Michael Gilbert <mgilbert@debian.org>

--- a/third_party/s2cellid/src/s2/util/math/vector.h
+++ b/third_party/s2cellid/src/s2/util/math/vector.h
@@ -185,8 +185,7 @@ class BasicVector {
 
   // Euclidean norm. For integer T, correct only if Norm2 does not overflow.
   FloatType Norm() const {
-    using std::sqrt;
-    return sqrt(Norm2());
+    return std::sqrt(Norm2());
   }
 
   // Normalized vector if the norm is nonzero. Not for integer types.
@@ -203,8 +202,7 @@ class BasicVector {
   D Sqrt() const {
     return Generate(
         [](const T& x) {
-          using std::sqrt;
-          return sqrt(x);
+          return std::sqrt(x);
         },
         AsD());
   }
@@ -369,9 +367,8 @@ class Vector2 : public util::math::inter
   T y() const { return c_[1]; }
 
   bool aequal(const Vector2& vb, FloatType margin) const {
-    using std::fabs;
-    return (fabs(c_[0] - vb.c_[0]) < margin) &&
-           (fabs(c_[1] - vb.c_[1]) < margin);
+    return (std::fabs(c_[0] - vb.c_[0]) < margin) &&
+           (std::fabs(c_[1] - vb.c_[1]) < margin);
   }
 
   void Set(T x, T y) { *this = Vector2(x, y); }
@@ -384,8 +381,7 @@ class Vector2 : public util::math::inter
 
   // return the angle between "this" and v in radians
   FloatType Angle(const Vector2& v) const {
-    using std::atan2;
-    return atan2(CrossProd(v), this->DotProd(v));
+    return std::atan2(CrossProd(v), this->DotProd(v));
   }
 
   // return a vector orthogonal to the current one
@@ -394,8 +390,7 @@ class Vector2 : public util::math::inter
 
   // TODO(user): unify Fabs/Abs between all Vector classes.
   Vector2 Fabs() const {
-    using std::fabs;
-    return Vector2(fabs(c_[0]), fabs(c_[1]));
+    return Vector2(std::fabs(c_[0]), std::fabs(c_[1]));
   }
   Vector2 Abs() const {
     static_assert(std::is_integral<VType>::value, "use Fabs for float_types");
@@ -466,8 +461,7 @@ class Vector3 : public util::math::inter
 
   // return the angle between two vectors in radians
   FloatType Angle(const Vector3& va) const {
-    using std::atan2;
-    return atan2(CrossProd(va).Norm(), this->DotProd(va));
+    return std::atan2(CrossProd(va).Norm(), this->DotProd(va));
   }
 
   Vector3 Fabs() const { return Abs(); }
@@ -532,11 +526,10 @@ class Vector4 : public util::math::inter
   const T* Data() const { return c_; }
 
   bool aequal(const Vector4& vb, FloatType margin) const {
-    using std::fabs;
-    return (fabs(c_[0] - vb.c_[0]) < margin) &&
-           (fabs(c_[1] - vb.c_[1]) < margin) &&
-           (fabs(c_[2] - vb.c_[2]) < margin) &&
-           (fabs(c_[3] - vb.c_[3]) < margin);
+    return (std::fabs(c_[0] - vb.c_[0]) < margin) &&
+           (std::fabs(c_[1] - vb.c_[1]) < margin) &&
+           (std::fabs(c_[2] - vb.c_[2]) < margin) &&
+           (std::fabs(c_[3] - vb.c_[3]) < margin);
   }
 
   void x(const T& v) { c_[0] = v; }
@@ -551,8 +544,7 @@ class Vector4 : public util::math::inter
   void Set(T x, T y, T z, T w) { *this = Vector4(x, y, z, w); }
 
   Vector4 Fabs() const {
-    using std::fabs;
-    return Vector4(fabs(c_[0]), fabs(c_[1]), fabs(c_[2]), fabs(c_[3]));
+    return Vector4(std::fabs(c_[0]), std::fabs(c_[1]), std::fabs(c_[2]), std::fabs(c_[3]));
   }
 
   Vector4 Abs() const {
--- a/third_party/s2cellid/src/s2/s1angle.h
+++ b/third_party/s2cellid/src/s2/s1angle.h
@@ -23,7 +23,7 @@
 #ifndef S2_S1ANGLE_H_
 #define S2_S1ANGLE_H_
 
-#include <math.h>
+#include <cmath>
 #include <limits>
 #include <ostream>
 #include <type_traits>
