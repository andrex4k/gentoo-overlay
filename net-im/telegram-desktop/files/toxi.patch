--- a/Telegram/SourceFiles/history/history_message.cpp
+++ b/Telegram/SourceFiles/history/history_message.cpp
@@ -509,16 +509,30 @@ HistoryMessage::HistoryMessage(
 
 	createComponents(config);
 
-	if (const auto media = data.vmedia()) {
-		setMedia(*media);
-	}
-	const auto textWithEntities = TextWithEntities{
-		TextUtilities::Clean(qs(data.vmessage())),
-		Api::EntitiesFromMTP(
-			&history->session(),
-			data.ventities().value_or_empty())
-	};
-	setText(_media ? textWithEntities : EnsureNonEmpty(textWithEntities));
+	UserId from = data.vfrom_id() ? peerFromMTP(*data.vfrom_id()) : PeerId(0);
+	PeerData* pd = from ? history->owner().user(from) : history->peer;
+	if (pd->isUser() && pd->asUser()->isBlocked()) {
+		const auto textWithEntities = TextWithEntities {
+		TextUtilities::Clean(qs("The message from blocked user")),
+		Api::EntitiesFromMTP(
+			&history->session(),
+			data.ventities().value_or_empty())
+		};
+		setText(_media ? textWithEntities : EnsureNonEmpty(textWithEntities));
+	}
+	else {
+		if (const auto media = data.vmedia()) {
+			setMedia(*media);
+		}
+		const auto textWithEntities = TextWithEntities {
+		TextUtilities::Clean(qs(data.vmessage())),
+		Api::EntitiesFromMTP (
+			&history->session(),
+			data.ventities().value_or_empty())
+		};
+		setText(_media ? textWithEntities : EnsureNonEmpty(textWithEntities));
+	}
+
 	if (const auto groupedId = data.vgrouped_id()) {
 		setGroupId(
 			MessageGroupId::FromRaw(history->peer->id, groupedId->v));
--- a/Telegram/SourceFiles/history/view/history_view_message.cpp
+++ b/Telegram/SourceFiles/history/view/history_view_message.cpp
@@ -363,6 +363,8 @@ void Message::applyGroupAdminChanges(
 
 QSize Message::performCountOptimalSize() {
 	const auto item = message();
+	PeerData* pd = item->from();
+	if (pd->isUser() && pd->asUser()->isBlocked()) return QSize(0,0);
 	const auto media = this->media();
 
 	auto maxWidth = 0;
@@ -548,6 +550,8 @@ void Message::draw(
 	}
 
 	const auto item = message();
+	PeerData* pd = item->from();
+	if (pd->isUser() && pd->asUser()->isBlocked()) return;
 	const auto media = this->media();
 
 	const auto outbg = hasOutLayout();
