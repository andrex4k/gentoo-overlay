diff --git a/Telegram/SourceFiles/history/view/media/history_view_photo.cpp b/Telegram/SourceFiles/history/view/media/history_view_photo.cpp
index 8a527da80..ec87e2217 100644
--- a/Telegram/SourceFiles/history/view/media/history_view_photo.cpp
+++ b/Telegram/SourceFiles/history/view/media/history_view_photo.cpp
@@ -21,6 +21,7 @@
 #include "data/data_photo.h"
 #include "data/data_file_origin.h"
 #include "app.h"
+#include "facades.h"
 #include "styles/style_history.h"
 
 namespace HistoryView {
@@ -70,14 +71,21 @@ QSize Photo::countOptimalSize() {
 	auto maxWidth = 0;
 	auto minHeight = 0;
 
+	const auto captionWithPaddings = _caption.maxWidth()
+			+ st::msgPadding.left()
+			+ st::msgPadding.right();
+	auto inWebPage = (_parent->media() != this);
 	auto tw = style::ConvertScale(_data->width());
 	auto th = style::ConvertScale(_data->height());
 	if (!tw || !th) {
 		tw = th = 1;
 	}
-	if (tw > st::maxMediaSize) {
+	if ((!Adaptive::ChatWide() || (captionWithPaddings <= st::maxMediaSize && !inWebPage)) && tw > st::maxMediaSize) {
 		th = (st::maxMediaSize * th) / tw;
 		tw = st::maxMediaSize;
+	} else if (Adaptive::ChatWide() && captionWithPaddings > st::maxMediaSize && tw > captionWithPaddings) {
+		th = (captionWithPaddings * th) / tw;
+		tw = captionWithPaddings;
 	}
 	if (th > st::maxMediaSize) {
 		tw = (st::maxMediaSize * tw) / th;
@@ -88,10 +96,14 @@ QSize Photo::countOptimalSize() {
 		return { _serviceWidth, _serviceWidth };
 	}
 	const auto minWidth = qMax((_parent->hasBubble() ? st::historyPhotoBubbleMinWidth : st::minPhotoSize), _parent->infoWidth() + 2 * (st::msgDateImgDelta + st::msgDateImgPadding.x()));
-	const auto maxActualWidth = qMax(tw, minWidth);
+	auto maxActualWidth = qMax(tw, minWidth);
 	maxWidth = qMax(maxActualWidth, th);
 	minHeight = qMax(th, st::minPhotoSize);
 	if (_parent->hasBubble() && !_caption.isEmpty()) {
+		if (Adaptive::ChatWide()) {
+			maxActualWidth = qMax(maxActualWidth, captionWithPaddings);
+			maxWidth = qMax(maxWidth, captionWithPaddings);
+		}
 		auto captionw = maxActualWidth - st::msgPadding.left() - st::msgPadding.right();
 		minHeight += st::mediaCaptionSkip + _caption.countHeight(captionw);
 		if (isBubbleBottom()) {
@@ -102,11 +114,20 @@ QSize Photo::countOptimalSize() {
 }
 
 QSize Photo::countCurrentSize(int newWidth) {
+	auto availableWidth = newWidth;
+
+	const auto captionWithPaddings = _caption.maxWidth()
+			+ st::msgPadding.left()
+			+ st::msgPadding.right();
+	auto inWebPage = (_parent->media() != this);
 	auto tw = style::ConvertScale(_data->width());
 	auto th = style::ConvertScale(_data->height());
-	if (tw > st::maxMediaSize) {
+	if ((!Adaptive::ChatWide() || (captionWithPaddings <= st::maxMediaSize && !inWebPage)) && tw > st::maxMediaSize) {
 		th = (st::maxMediaSize * th) / tw;
 		tw = st::maxMediaSize;
+	} else if (Adaptive::ChatWide() && captionWithPaddings > st::maxMediaSize && tw > captionWithPaddings) {
+		th = (captionWithPaddings * th) / tw;
+		tw = captionWithPaddings;
 	}
 	if (th > st::maxMediaSize) {
 		tw = (st::maxMediaSize * tw) / th;
@@ -131,6 +152,10 @@ QSize Photo::countCurrentSize(int newWidth) {
 	newWidth = qMax(_pixw, minWidth);
 	auto newHeight = qMax(_pixh, st::minPhotoSize);
 	if (_parent->hasBubble() && !_caption.isEmpty()) {
+		if (Adaptive::ChatWide()) {
+			newWidth = qMax(newWidth, captionWithPaddings);
+			newWidth = qMin(newWidth, availableWidth);
+		}
 		const auto captionw = newWidth
 			- st::msgPadding.left()
 			- st::msgPadding.right();
